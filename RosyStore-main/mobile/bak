import React, { useState, useEffect, useCallback } from 'react';
import { Image, View, Text, TouchableOpacity, StyleSheet, Dimensions, ScrollView, KeyboardAvoidingView, Platform, TextInput, Button, Alert } from 'react-native';
import { AntDesign, Ionicons } from '@expo/vector-icons';
import * as ImagePicker from 'expo-image-picker';
import { manipulateAsync, SaveFormat } from 'expo-image-manipulator';
import { Picker } from '@react-native-picker/picker';

const { width } = Dimensions.get('window');
const desiredImageSize = 1080;
const commonImageStyle = {
  width: (width - 48) / 4,
  aspectRatio: 1,
};

export default function ImagePickerExample() {
  const [image, setImage] = useState(null);
  const [images, setImages] = useState(Array(4).fill(null).map(() => ({ uri: null })));
  const [hasGalleryPermission, setHasGalleryPermission] = useState(null);

  const [productCode, setProductCode] = useState('');
  const [amount, setAmount] = useState('1');
  const [stock, setStock] = useState('');
  const [selectedValue, setSelectedValue] = useState('MM');

  const [priceBuy, setPriceBuy] = useState('');
  const inputPriceBuyFloat = priceBuy.replace(/\D/g, "").replace(/(\d)(\d{2})$/, "$1.$2");
  const formatPriceBuy = priceBuy.replace(/\D/g, "").replace(/(\d)(\d{2})$/, "$1,$2").replace(/(?=(\d{3})+(\D))\B/g, ".");

  const [priceSell, setPriceSell] = useState('');
  const inputPriceSellFloat = priceSell.replace(/\D/g, "").replace(/(\d)(\d{2})$/, "$1.$2");
  const formatPriceSell = priceSell.replace(/\D/g, "").replace(/(\d)(\d{2})$/, "$1,$2").replace(/(?=(\d{3})+(\D))\B/g, ".");

  const [nameProduct, setNameProduct] = useState('');
  const handleTextChangeProduct = (text) => {
    if (text.length <= 16) {
      setNameProduct(text);
    }
  };

  const [description, setNameDescription] = useState('');
  const handleTextChangeDescription = (text) => {
    if (text.length <= 250) {
      setNameDescription(text);
    }
  };

  const resizeImage = async (uri) => {
    const manipResult = await manipulateAsync(
      uri,
      [{ resize: { width: desiredImageSize, height: desiredImageSize } }],
      { compress: 1, format: SaveFormat.JPEG }
    );
    return manipResult.uri;
  };

  const pickImage = useCallback(async (index) => {
    try {
      let result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.7,
      });

      if (!result.canceled) {
        const resizedImage = await resizeImage(result.assets[0].uri);
        const newImages = [...images];
        newImages[index] = { uri: resizedImage };
        setImages(newImages);
      }

      if (hasGalleryPermission === false) {
        console.warn('No access to Internal Storage');
      }
    } catch (error) {
      console.error('Error picking image:', error);
    }
  }, [images]);

  const pickImages = useCallback(async () => {
    try {
      let result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.All,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 1,
      });

      if (!result.canceled) {
        const resizedImage = await resizeImage(result.assets[0].uri);
        setImage({ uri: resizedImage });
      }
    } catch (error) {
      console.error('Error picking images:', error);
    }
  }, []);

  useEffect(() => {
    (async () => {
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      setHasGalleryPermission(status === 'granted');
    })();
  }, []);

  if (hasGalleryPermission === false) {
    return (
      <View style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
        <Text>No access to Internal Storage</Text>
      </View>
    );
  }

// FUNÇÃO NO SERVIDOR
// FUNÇÃO NO SERVIDOR
async function submit() {
  try {
    const formData = new FormData();

    // Adiciona outros dados ao FormData
    formData.append('productCode', productCode);
    formData.append('amount', amount);
    formData.append('stock', stock);
    formData.append('selectedValue', selectedValue);
    formData.append('inputPriceBuyFloat', inputPriceBuyFloat);
    formData.append('inputPriceSellFloat', inputPriceSellFloat);

    // Adiciona as imagens ao FormData
    images.forEach((image, index) => {
      if (image && image.uri) {
        formData.append(`image${index + 1}`, {
          uri: image.uri,
          type: 'image/jpeg', // ou o tipo de arquivo apropriado
          name: `image_${index + 1}.jpg`,
        });
      }
    });

    // Realiza a requisição usando fetch
    const response = await fetch('https://rosystore.com.br/server/index.php', {
      method: 'POST',
      body: formData,
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    // Processa a resposta
    const responseJson = await response.json();

    if (responseJson === 'ok') {
      Alert.alert('Dados', 'Ok');
    } else {
      Alert.alert('Erro!', 'Dados não foram registrados');
    }

    // Se o servidor retornar a URL ou a localização dos arquivos, você pode acessá-la assim:
    const fileUrls = responseJson.fileUrls;
    console.log('URLs dos arquivos:', fileUrls);

  } catch (error) {
    console.error(error);
    Alert.alert('Erro!', 'Ocorreu um erro ao enviar os dados');
  }
}



  return (
    <KeyboardAvoidingView
      behavior={Platform.OS === 'ios' ? 'padding' : undefined}
      style={{flex: 1, backgroundColor: '#FFF'}}
    >
      <ScrollView
        style={{width: '100%'}}
        showsHorizontalScrollIndicator={false}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={{ }}
      >
        {/**----------------------------------IMG------------------------------------- */}
        <View style={styles.containerPrime}>
          <TouchableOpacity style={styles.card} onPress={pickImages}>
            {image && (
              <Image source={image} resizeMode="cover" style={{ width: (width - 18) / 1, aspectRatio: 1}} />
            )}
          </TouchableOpacity>
        </View>

        {/**----------------------------------IMGS------------------------------------ */}
        <View style={styles.container}>
          {images.map((imageObj, index) => (
            <TouchableOpacity
              key={index}
              onPress={() => pickImage(index)}
              style={styles.buttonCard}
            >
              <View style={styles.imgIcon}>
                <Ionicons name="ios-images-outline" size={24} color="black" />
              </View>
              <TouchableOpacity
                style={styles.buttonClearImg}
                onPress={() =>
                  setImages((prevImages) => {
                    const newImages = [...prevImages];
                    newImages[index] = { uri: null };
                    return newImages;
                  })
                }
              >
                <AntDesign name="delete" size={16} color="black" />
              </TouchableOpacity>
              {imageObj.uri && (
                <Image
                  source={imageObj}
                  style={[commonImageStyle, { resizeMode: 'cover', zIndex: 2 }]}
                />
              )}
            </TouchableOpacity>
          ))}
        </View>

        {/**-----------------------------------código do produto------------------------------------ */}
        <View style={styles.form}>
          <>
            <View style={styles.count}>
              <Text style={styles.label}>código do produto</Text>
            </View>
            <TextInput
              style={styles.input}
              placeholder=".........."
              placeholderTextColor="gray"
              keyboardType="default"
              autoCapitalize="sentences"
              autoCorrect={true}
              value={productCode}
              onChangeText={(text) => setProductCode(text)}
              returnKeyType="next"
              blurOnSubmit={false}
            />
          </>

          {/**------------------------------------nome do produto----------------------------------- */}
          <>
            <View style={styles.count}>
              <Text style={styles.label}>nome do produto</Text>
              <Text>{nameProduct.length}/16</Text>
            </View>
            <TextInput
              style={styles.input}
              placeholder=".........."
              placeholderTextColor="gray"
              keyboardType="default"
              autoCapitalize="sentences"
              autoCorrect={true}
              value={nameProduct}
              onChangeText={handleTextChangeProduct}
              returnKeyType="next"
              blurOnSubmit={false}
            />
          </>

          {/**-------------------------------------valor de venda---------------------------------- */}
          <View style={styles.row}>
            <View style={{width: '100%', flex: 1}}>
              <Text style={styles.label}>valor de compra</Text>
              <TextInput
                style={styles.input}
                placeholder="..........."
                placeholderTextColor="gray"
                keyboardType="numeric"
                autoCorrect={true}
                value={formatPriceBuy}
                onChangeText={(text) => setPriceBuy(text)}
                returnKeyType="next"
                blurOnSubmit={false}
              />
            </View>

            <View style={{width: '100%', flex: 1}}>
              <Text style={styles.label}>valor de venda</Text>
              <TextInput
                style={styles.input}
                placeholder="..........."
                placeholderTextColor="gray"
                keyboardType="numeric"
                autoCapitalize="sentences"
                autoCorrect={true}
                value={formatPriceSell}
                onChangeText={(text) => setPriceSell(text)}
                returnKeyType="next"
                blurOnSubmit={false}
              />
            </View>
          </View>

          {/**-----------------------------------tamanho------------------------------------ */}
          <View style={styles.row}>
            <View style={{width: 100,}}>
              <Text style={styles.label}>tamanho</Text>
              <TextInput
                style={styles.input}
                placeholder="..........."
                placeholderTextColor="gray"
                keyboardType="numeric"
                autoCorrect={true}
                value={amount}
                onChangeText={(text) => setAmount(text)}
                returnKeyType="next"
                blurOnSubmit={false}
              />
            </View>

            <View style={{width: '100%', flex: 1,}}>
              <Text style={styles.label}>Tipo</Text>
              <View style={{borderWidth: 1, height: 50, justifyContent: 'center'}}>
                <Picker
                  selectedValue={selectedValue}
                  onValueChange={(itemValue, itemIndex) => setSelectedValue(itemValue)}
                >
                  <Picker.Item label="CIRCUNFERÊNCIA" value="circumference" />
                  <Picker.Item label="MM" value="mm" />
                  <Picker.Item label="CM" value="cm" />
                </Picker>
              </View>
            </View>
          </View>

          {/**----------------------------------------------------------------------- */}
          <View style={styles.row}>
            <View style={{width: '100%', flex: 1}}>
              <Text style={styles.label}>qtd. estoque</Text>
              <TextInput
                style={styles.input}
                placeholder="..........."
                placeholderTextColor="gray"
                keyboardType="numeric"
                autoCapitalize="sentences"
                autoCorrect={true}
                value={stock}
                onChangeText={(text) => setStock(text)}
                returnKeyType="next"
                blurOnSubmit={false}
              />
            </View>
          </View>

          {/**----------------------------------------------------------------------- */}
          <>
            <View style={styles.count}>
              <Text style={styles.label}>descrição do produto</Text>
              <Text>{description.length}/250</Text>
            </View>
            <TextInput
              style={[styles.input, {textAlignVertical: 'top', paddingVertical: 16}]}
              placeholder=".........."
              placeholderTextColor="gray"
              keyboardType="default"
              autoCapitalize="sentences"
              multiline={true}
              underlineColorAndroid='transparent'
              numberOfLines={5}
              autoCorrect={true}
              value={description}
              onChangeText={handleTextChangeDescription}
              returnKeyType="next"
              blurOnSubmit={false}
            />
          </>
        </View>

        <TouchableOpacity onPress={() => submit()}>
          <Text>enviar</Text>
        </TouchableOpacity>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  containerPrime: {
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 8,
    marginTop: 8,
  },
  card: {
    borderWidth: 1,
    width: (width - 16) / 1,
    aspectRatio: 1,
  },
  container: {
    paddingHorizontal: 8,
    alignItems: 'center',
    justifyContent: 'space-between',
    flexDirection: 'row',
    gap: 8,
  },
  imgIcon: {
    alignItems: 'center',
    justifyContent: 'center',
    position: 'absolute',
    zIndex: 1,
  },
  buttonCard: {
    width: (width - 48) / 4,
    maxHeight: 1080,
    aspectRatio: 1,
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
  },
  buttonClearImg: {
    width: 30,
    height: 30,
    backgroundColor: '#ffffff',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'absolute',
    zIndex: 99,
    right: 0,
    top: 0,
  },
  form: {
    paddingHorizontal: 8,
    paddingTop: 16,
    paddingBottom: 80,
  },
  row: {
    flexDirection: 'row',
    gap: 16,
  },
  label: {
    textTransform: 'uppercase',
  },
  input: {
    minHeight: 50,
    marginBottom: 32,
    borderWidth: 1,
    paddingHorizontal: 8,
    borderRadius: 2,
  },
  count: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  selectedForm: {
    borderWidth: 1,
    paddingHorizontal: 8,
    borderRadius: 2,
    alignItems: 'center',
    justifyContent: 'space-between',
    flexDirection: 'row'
  }
});
